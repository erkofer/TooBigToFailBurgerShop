version: '3.4'

services:
  mongo:
    image: bitnami/mongodb
    environment:
      MONGODB_USERNAME: burger
      MONGODB_PASSWORD: burger
      MONGODB_DATABASE: burgers
      MONGODB_ROOT_PASSWORD: burger
      MONGODB_REPLICA_SET_MODE: primary 
      MONGODB_ADVERTISED_HOSTNAME: mongo
      MONGODB_REPLICA_SET_KEY: replicasetkey123 

  mongodb-secondary:
    image: 'docker.io/bitnami/mongodb:4.4-debian-10'
    depends_on:
      - mongo
    environment:
      - MONGODB_ADVERTISED_HOSTNAME=mongodb-secondary
      - MONGODB_REPLICA_SET_MODE=secondary
      - MONGODB_INITIAL_PRIMARY_HOST=mongo
      - MONGODB_INITIAL_PRIMARY_ROOT_PASSWORD=burger
      - MONGODB_REPLICA_SET_KEY=replicasetkey123

  mongodb-arbiter:
    image: 'docker.io/bitnami/mongodb:4.4-debian-10'
    depends_on:
      - mongo
    environment:
      - MONGODB_ADVERTISED_HOSTNAME=mongodb-arbiter
      - MONGODB_REPLICA_SET_MODE=arbiter
      - MONGODB_INITIAL_PRIMARY_HOST=mongo
      - MONGODB_INITIAL_PRIMARY_ROOT_PASSWORD=burger
      - MONGODB_REPLICA_SET_KEY=replicasetkey123

  mongo-express:
    image: mongo-express
    ports:
      - 8081:8081
    environment:
      ME_CONFIG_MONGODB_SERVER: mongo  
      ME_CONFIG_MONGODB_ADMINUSERNAME: burger
      ME_CONFIG_MONGODB_ADMINPASSWORD: burger

  pgadmin:
    image: dpage/pgadmin4
    ports:
        - "6541:80"
    environment:
        PGADMIN_DEFAULT_EMAIL: burger@burger.com
        PGADMIN_DEFAULT_PASSWORD: burger

  jaeger:
    image: jaegertracing/all-in-one
    ports:
      - "16686:16686"
    environment:
        COLLECTOR_ZIPKIN_HTTP_PORT: 9411

  rabbitmq:
    image: rabbitmq:management-alpine
    ports:
      - "15672:15672"
    environment:
      RABBITMQ_DEFAULT_USER: "guest"
      RABBITMQ_DEFAULT_PASS: "guest"

  burgers.data:
    image: postgres:alpine
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER: "burger"
      POSTGRES_PASSWORD: "burger"
      POSTGRES_DB: "burgers"
    command: "--max-prepared-transactions=110"
  
  burgers.webspa:
    image: burgers.webspa
    build:
      context: .
      dockerfile: web/Burgers.WebSPA/Dockerfile

  burgers.ordering.api:
    image: burgers.ordering.api
    build:
      context: .
      dockerfile: services/Ordering/Ordering.API/Dockerfile
    depends_on:
      - "burgers.data"

  burgers.create.order.consumer:
    image: burgers.create.order.consumer
    build:
      context: .
      dockerfile: services/Ordering/CreateOrder.Consumer/Dockerfile

  burgers.ordering.state.service:
    image: ordering.stateservice
    build:
      context: .
      dockerfile: services/Ordering/Ordering.StateService/Ordering.StateService/Dockerfile

  burgers.process.order.consumer:
    image: burgers.process.order.consumer
    build:
      context: .
      dockerfile: services/Ordering/ProcessOrder.Consumer/Dockerfile

volumes:
    mongodb_master_data:
        driver: local

networks:
  default:
    external:
      name: burgers.network